package com.dingmouren.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dingmouren.dingdingmusic.bean.LocalMusicBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_MUSIC_BEAN".
*/
public class LocalMusicBeanDao extends AbstractDao<LocalMusicBean, Void> {

    public static final String TABLENAME = "LOCAL_MUSIC_BEAN";

    /**
     * Properties of entity LocalMusicBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", false, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Artist = new Property(2, String.class, "artist", false, "ARTIST");
        public final static Property Duration = new Property(3, long.class, "duration", false, "DURATION");
        public final static Property Size = new Property(4, long.class, "size", false, "SIZE");
        public final static Property Path = new Property(5, String.class, "path", false, "PATH");
    }


    public LocalMusicBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LocalMusicBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_MUSIC_BEAN\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"ARTIST\" TEXT," + // 2: artist
                "\"DURATION\" INTEGER NOT NULL ," + // 3: duration
                "\"SIZE\" INTEGER NOT NULL ," + // 4: size
                "\"PATH\" TEXT);"); // 5: path
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_MUSIC_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalMusicBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(3, artist);
        }
        stmt.bindLong(4, entity.getDuration());
        stmt.bindLong(5, entity.getSize());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalMusicBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(3, artist);
        }
        stmt.bindLong(4, entity.getDuration());
        stmt.bindLong(5, entity.getSize());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public LocalMusicBean readEntity(Cursor cursor, int offset) {
        LocalMusicBean entity = new LocalMusicBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // artist
            cursor.getLong(offset + 3), // duration
            cursor.getLong(offset + 4), // size
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // path
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalMusicBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setArtist(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDuration(cursor.getLong(offset + 3));
        entity.setSize(cursor.getLong(offset + 4));
        entity.setPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(LocalMusicBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(LocalMusicBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(LocalMusicBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
