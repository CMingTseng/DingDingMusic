package com.dingmouren.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dingmouren.dingdingmusic.bean.MusicBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MUSIC_BEAN".
*/
public class MusicBeanDao extends AbstractDao<MusicBean, Void> {

    public static final String TABLENAME = "MUSIC_BEAN";

    /**
     * Properties of entity MusicBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Songname = new Property(0, String.class, "songname", false, "SONGNAME");
        public final static Property Seconds = new Property(1, int.class, "seconds", false, "SECONDS");
        public final static Property Albummid = new Property(2, String.class, "albummid", false, "ALBUMMID");
        public final static Property Songid = new Property(3, int.class, "songid", false, "SONGID");
        public final static Property Singerid = new Property(4, int.class, "singerid", false, "SINGERID");
        public final static Property Albumpic_big = new Property(5, String.class, "albumpic_big", false, "ALBUMPIC_BIG");
        public final static Property Albumpic_small = new Property(6, String.class, "albumpic_small", false, "ALBUMPIC_SMALL");
        public final static Property DownUrl = new Property(7, String.class, "downUrl", false, "DOWN_URL");
        public final static Property Url = new Property(8, String.class, "url", false, "URL");
        public final static Property Singername = new Property(9, String.class, "singername", false, "SINGERNAME");
        public final static Property Albumid = new Property(10, int.class, "albumid", false, "ALBUMID");
        public final static Property Type = new Property(11, int.class, "type", false, "TYPE");
        public final static Property Path = new Property(12, String.class, "path", false, "PATH");
    }


    public MusicBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MusicBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MUSIC_BEAN\" (" + //
                "\"SONGNAME\" TEXT," + // 0: songname
                "\"SECONDS\" INTEGER NOT NULL ," + // 1: seconds
                "\"ALBUMMID\" TEXT," + // 2: albummid
                "\"SONGID\" INTEGER NOT NULL ," + // 3: songid
                "\"SINGERID\" INTEGER NOT NULL ," + // 4: singerid
                "\"ALBUMPIC_BIG\" TEXT," + // 5: albumpic_big
                "\"ALBUMPIC_SMALL\" TEXT," + // 6: albumpic_small
                "\"DOWN_URL\" TEXT," + // 7: downUrl
                "\"URL\" TEXT," + // 8: url
                "\"SINGERNAME\" TEXT," + // 9: singername
                "\"ALBUMID\" INTEGER NOT NULL ," + // 10: albumid
                "\"TYPE\" INTEGER NOT NULL ," + // 11: type
                "\"PATH\" TEXT);"); // 12: path
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MUSIC_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MusicBean entity) {
        stmt.clearBindings();
 
        String songname = entity.getSongname();
        if (songname != null) {
            stmt.bindString(1, songname);
        }
        stmt.bindLong(2, entity.getSeconds());
 
        String albummid = entity.getAlbummid();
        if (albummid != null) {
            stmt.bindString(3, albummid);
        }
        stmt.bindLong(4, entity.getSongid());
        stmt.bindLong(5, entity.getSingerid());
 
        String albumpic_big = entity.getAlbumpic_big();
        if (albumpic_big != null) {
            stmt.bindString(6, albumpic_big);
        }
 
        String albumpic_small = entity.getAlbumpic_small();
        if (albumpic_small != null) {
            stmt.bindString(7, albumpic_small);
        }
 
        String downUrl = entity.getDownUrl();
        if (downUrl != null) {
            stmt.bindString(8, downUrl);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(9, url);
        }
 
        String singername = entity.getSingername();
        if (singername != null) {
            stmt.bindString(10, singername);
        }
        stmt.bindLong(11, entity.getAlbumid());
        stmt.bindLong(12, entity.getType());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(13, path);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MusicBean entity) {
        stmt.clearBindings();
 
        String songname = entity.getSongname();
        if (songname != null) {
            stmt.bindString(1, songname);
        }
        stmt.bindLong(2, entity.getSeconds());
 
        String albummid = entity.getAlbummid();
        if (albummid != null) {
            stmt.bindString(3, albummid);
        }
        stmt.bindLong(4, entity.getSongid());
        stmt.bindLong(5, entity.getSingerid());
 
        String albumpic_big = entity.getAlbumpic_big();
        if (albumpic_big != null) {
            stmt.bindString(6, albumpic_big);
        }
 
        String albumpic_small = entity.getAlbumpic_small();
        if (albumpic_small != null) {
            stmt.bindString(7, albumpic_small);
        }
 
        String downUrl = entity.getDownUrl();
        if (downUrl != null) {
            stmt.bindString(8, downUrl);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(9, url);
        }
 
        String singername = entity.getSingername();
        if (singername != null) {
            stmt.bindString(10, singername);
        }
        stmt.bindLong(11, entity.getAlbumid());
        stmt.bindLong(12, entity.getType());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(13, path);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MusicBean readEntity(Cursor cursor, int offset) {
        MusicBean entity = new MusicBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // songname
            cursor.getInt(offset + 1), // seconds
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // albummid
            cursor.getInt(offset + 3), // songid
            cursor.getInt(offset + 4), // singerid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // albumpic_big
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // albumpic_small
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // downUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // url
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // singername
            cursor.getInt(offset + 10), // albumid
            cursor.getInt(offset + 11), // type
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // path
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MusicBean entity, int offset) {
        entity.setSongname(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSeconds(cursor.getInt(offset + 1));
        entity.setAlbummid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSongid(cursor.getInt(offset + 3));
        entity.setSingerid(cursor.getInt(offset + 4));
        entity.setAlbumpic_big(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAlbumpic_small(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDownUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSingername(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAlbumid(cursor.getInt(offset + 10));
        entity.setType(cursor.getInt(offset + 11));
        entity.setPath(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MusicBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MusicBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(MusicBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
